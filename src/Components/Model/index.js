/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useRef, useEffect, useState } from 'react';
import { useGLTF } from '@react-three/drei';
import { useFrame, useThree } from 'react-three-fiber';
import {Pages} from '../../utils/Pages';

export default function Model(props) {
  const {page} = props;
  const group = useRef();
  const { nodes, materials } = useGLTF('/brain.gltf');
  const { camera } = useThree();


  const RotationState= [[1.9, 0.25, -2.9], [2.5, 0.2, -1.2]] //1.6 0.05 -1.4
  
  useFrame( (state) => {
    const t = state.clock.getElapsedTime()
    group.current.rotation.z = -0.2 - (1 + Math.sin(t / 1.5)) / 20
    group.current.rotation.x = Math.cos(t / 4) / 8
    group.current.rotation.y = Math.sin(t / 4) / 8
    group.current.position.y = (1 + Math.sin(t / 1.5)) / 10;
    camera.zoom = 1;
    const WIDContainerTop = document.querySelector('.WID-Container').getBoundingClientRect().top;

    if(page === Pages[2]){
      if(camera.position.x < 0){ // if object is appearing on the right of the screen
        if((((WIDContainerTop / 6) * -7) / 100) > -7.1){
          camera.position.x = ((WIDContainerTop / 6) * -7) / 100;
        }
        // camera.position.x += 0.08;
      }
    } else {
      if(camera.position.x > -7.1){ // if object is appearing on the left of the screen
        camera.position.x -=0.09;
        // camera.position.x = ((WIDContainerTop / 6) * -7) / 100;

      }
    }
  })


  return (
    <group ref={group} {...props} dispose={null}>
      <group ref={group} position={[-3.5,0,0]} rotation={RotationState[0]} scale={[3.59, 3.59, 3.59]}>
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Untitled002.geometry}
          material={materials.BRAIN_TEXTURE_blinn2}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Untitled002_1.geometry}
          material={nodes.Untitled002_1.material}
        />
      </group>
    </group>
  )
}

useGLTF.preload('/brain.gltf')
